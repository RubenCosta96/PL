
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'aleatorio comment comment_multi concat entrada escrever fim fold funcao lista map num string varprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : assignment ";"\n                 | write_statement ";"\n                 | function_definition ";"assignment : var "=" expression\n                  | var "?" "=" expression\n                  | var "!" "=" expression\n                  | var "=" listawrite_statement : escrever "(" expression ")"\n                       | escrever "(" string ")"\n                       | escrever "(" lista ")"expression : expression "+" term\n                  | expression "-" term\n                  | expression concat expression\n                  | termterm : term "*" factor\n            | term "/" factor\n            | factorfactor : num\n              | var\n              | lista\n              | string\n              | "(" expression ")"list : "[" elements "]"elements : elements "," expression\n                | expressionfunction_definition : funcao var "(" parameter_list ")" ":" statement_list fimparameter_list : parameter_list "," var\n                      | var'
    
_lr_action_items = {'var':([0,2,3,9,10,11,12,13,14,17,26,27,28,32,33,34,35,36,37,54,55,57,],[7,7,-3,18,-2,-4,-5,-6,19,19,19,19,19,45,19,19,19,19,19,56,7,7,]),'escrever':([0,2,3,10,11,12,13,55,57,],[8,8,-3,-2,-4,-5,-6,8,8,]),'funcao':([0,2,3,10,11,12,13,55,57,],[9,9,-3,-2,-4,-5,-6,9,9,]),'$end':([1,2,3,10,11,12,13,],[0,-1,-3,-2,-4,-5,-6,]),'fim':([3,10,11,12,13,57,],[-3,-2,-4,-5,-6,58,]),';':([4,5,6,19,20,21,22,23,24,25,39,40,41,42,43,44,47,48,49,50,51,52,58,],[11,12,13,-22,-7,-10,-17,-20,-21,-24,-23,-8,-9,-11,-12,-13,-14,-15,-16,-18,-19,-25,-29,]),'=':([7,15,16,],[14,27,28,]),'?':([7,],[15,]),'!':([7,],[16,]),'(':([8,14,17,18,26,27,28,33,34,35,36,37,],[17,26,26,32,26,26,26,26,26,26,26,26,]),'lista':([14,17,26,27,28,33,34,35,36,37,],[21,31,39,39,39,39,39,39,39,39,]),'num':([14,17,26,27,28,33,34,35,36,37,],[24,24,24,24,24,24,24,24,24,24,]),'string':([14,17,26,27,28,33,34,35,36,37,],[25,30,25,25,25,25,25,25,25,25,]),'*':([19,21,22,23,24,25,30,31,39,47,48,50,51,52,],[-22,-23,36,-20,-21,-24,-24,-23,-23,36,36,-18,-19,-25,]),'/':([19,21,22,23,24,25,30,31,39,47,48,50,51,52,],[-22,-23,37,-20,-21,-24,-24,-23,-23,37,37,-18,-19,-25,]),'+':([19,20,21,22,23,24,25,29,30,31,38,39,40,41,47,48,49,50,51,52,],[-22,33,-23,-17,-20,-21,-24,33,-24,-23,33,-23,33,33,-14,-15,33,-18,-19,-25,]),'-':([19,20,21,22,23,24,25,29,30,31,38,39,40,41,47,48,49,50,51,52,],[-22,34,-23,-17,-20,-21,-24,34,-24,-23,34,-23,34,34,-14,-15,34,-18,-19,-25,]),'concat':([19,20,21,22,23,24,25,29,30,31,38,39,40,41,47,48,49,50,51,52,],[-22,35,-23,-17,-20,-21,-24,35,-24,-23,35,-23,35,35,-14,-15,35,-18,-19,-25,]),')':([19,22,23,24,25,29,30,31,38,39,45,46,47,48,49,50,51,52,56,],[-22,-17,-20,-21,-24,42,43,44,52,-23,-31,53,-14,-15,-16,-18,-19,-25,-30,]),',':([45,46,56,],[-31,54,-30,]),':':([53,],[55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,55,],[2,57,]),'statement':([0,2,55,57,],[3,10,3,10,]),'assignment':([0,2,55,57,],[4,4,4,4,]),'write_statement':([0,2,55,57,],[5,5,5,5,]),'function_definition':([0,2,55,57,],[6,6,6,6,]),'expression':([14,17,26,27,28,35,],[20,29,38,40,41,49,]),'term':([14,17,26,27,28,33,34,35,],[22,22,22,22,22,47,48,22,]),'factor':([14,17,26,27,28,33,34,35,36,37,],[23,23,23,23,23,23,23,23,50,51,]),'parameter_list':([32,],[46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','grammar.py',8),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','grammar.py',12),
  ('statement_list -> statement','statement_list',1,'p_statement_list','grammar.py',13),
  ('statement -> assignment ;','statement',2,'p_statement','grammar.py',20),
  ('statement -> write_statement ;','statement',2,'p_statement','grammar.py',21),
  ('statement -> function_definition ;','statement',2,'p_statement','grammar.py',22),
  ('assignment -> var = expression','assignment',3,'p_assignment','grammar.py',26),
  ('assignment -> var ? = expression','assignment',4,'p_assignment','grammar.py',27),
  ('assignment -> var ! = expression','assignment',4,'p_assignment','grammar.py',28),
  ('assignment -> var = lista','assignment',3,'p_assignment','grammar.py',29),
  ('write_statement -> escrever ( expression )','write_statement',4,'p_write_statement','grammar.py',36),
  ('write_statement -> escrever ( string )','write_statement',4,'p_write_statement','grammar.py',37),
  ('write_statement -> escrever ( lista )','write_statement',4,'p_write_statement','grammar.py',38),
  ('expression -> expression + term','expression',3,'p_expression','grammar.py',43),
  ('expression -> expression - term','expression',3,'p_expression','grammar.py',44),
  ('expression -> expression concat expression','expression',3,'p_expression','grammar.py',45),
  ('expression -> term','expression',1,'p_expression','grammar.py',46),
  ('term -> term * factor','term',3,'p_term','grammar.py',56),
  ('term -> term / factor','term',3,'p_term','grammar.py',57),
  ('term -> factor','term',1,'p_term','grammar.py',58),
  ('factor -> num','factor',1,'p_factor','grammar.py',65),
  ('factor -> var','factor',1,'p_factor','grammar.py',66),
  ('factor -> lista','factor',1,'p_factor','grammar.py',67),
  ('factor -> string','factor',1,'p_factor','grammar.py',68),
  ('factor -> ( expression )','factor',3,'p_factor','grammar.py',69),
  ('list -> [ elements ]','list',3,'p_list','grammar.py',84),
  ('elements -> elements , expression','elements',3,'p_elements','grammar.py',88),
  ('elements -> expression','elements',1,'p_elements','grammar.py',89),
  ('function_definition -> funcao var ( parameter_list ) : statement_list fim','function_definition',8,'p_function_definition','grammar.py',96),
  ('parameter_list -> parameter_list , var','parameter_list',3,'p_parameter_list','grammar.py',100),
  ('parameter_list -> var','parameter_list',1,'p_parameter_list','grammar.py',101),
]
